// == ENTRY POINT FOR GENERATING THE CHART OF ACTIVITIES ACROSS TIME ==

// GLOBAL VARIABLES
var today, centerBarDate, minDateBeforeFetch, maxDateBeforeFetch, arrowRight, rectActivityInfo;

// Body onLoad Event Handler
// Reruns every time the bodyDiv changes
function main(event) {
    // This variable is used to determine when to hide the right arrow
    today = (new DateHelper()).today();
    centerBarDate = today.addDays(-4);

    // Limits before Ajax requests for more activities are sent
    minDateBeforeFetch = centerBarDate.addDays(-5);
    maxDateBeforeFetch = centerBarDate.addDays(5);

    // Left arrow doesn't yet need any special functionality
    document.getElementById("arrow-left").addEventListener("click", getArrowEventHandler(-1));
    arrowRight = new ArrowRight(document.getElementById("arrow-right"));

    // The event generated by the following event factory adds the necessary data
    // to the hover-on-rect-activity-info-div, grabbing said data
    // from the rect being hovered upon, and floats the div next to the mouse
    rectActivityInfo = document.getElementById('rect-activity-info');
    document.getElementById('chartDiv').addEventListener('mouseover', showActivityInfoEventHandler);
}

// Upon 'show-chart' being clicked, the request date is set to client's date - 4 days
function prepareAnchorForChartRequest() {
    var showChart = document.getElementById("show-chart");
    showChart.href = centerBarDate.dateObject.getFullYear() + "/" + (centerBarDate.dateObject.getMonth() + 1) + "/" + centerBarDate.dateObject.getDate();
}

// GLOBAL VARIABLES
// Variables which are vital to the chart, which will be populated continously through AJAX requests;
var activities, budgets, chart;

// When the Ajax response for the chart data is returned to the client, the following goes through
function resolveAjaxReponseForChart(data, status, xhr) {
    if (status == "success") {

        // Code to show the svgDiv
        document.getElementById("chartDiv").style.display = "block";

        // Activities and budgets are set
        activities = data.activities;
        budgets = data.budgets;

        // The chart object is found and readied with the necessary data; then drawn
        chart = new Chart(document.querySelector('#svgContainer svg'));
        chart.ready(returnSevenDaysAroundDate(centerBarDate, activities), null, true);
        chart.clear();
        chart.draw();
    }
}

function returnSevenDaysAroundDate(dateHelper, data) {
    var result = {};
    for (var i = -3; i <= 3; i++) {
        var currDate = dateHelper.addDays(i);
        result[currDate.dateString] = data[currDate.dateString];
    }
    return result;
}

function showActivityInfoEventHandler(event) {
    if (event.target.nodeName == 'rect') { event.preventDefault();

        // The simple stuff: show the basic info about the activity
        rectActivityInfo.querySelector('#activity-name').innerHTML = event.target.getAttribute('data-activity-name');
        rectActivityInfo.querySelector('#activity-description').innerHTML = event.target.getAttribute('data-activity-description');
        
        // Resetting all spans to show up if they were hidden before
        var allSpans = rectActivityInfo.querySelectorAll('span');
        for (var span of allSpans)
            span.style.display = 'inline';

        var hours = event.target.getAttribute('data-activity-hours');
        var hoursSpan = rectActivityInfo.querySelector('#activity-hours');
        if (hours != 0)
            hoursSpan.innerHTML = hours + ' hours';
        else hoursSpan.style.display = 'none';

        var minutes = event.target.getAttribute('data-activity-minutes');
        var minutesSpan = rectActivityInfo.querySelector('#activity-minutes');
        if (minutes != 0)
            minutesSpan.innerHTML = minutes + ' minutes';
        else minutesSpan.style.display = 'none';

        // Should show 'and' only if both 'hours' and 'minutes' are present
        var andSpan = rectActivityInfo.querySelector('#activity-and');
        if (hours == 0 || minutes == 0)
            andSpan.style.display = 'none';
       
        // Should hide 'fromSpan' and 'toSpan' in budget mode
        var from = event.target.getAttribute('data-activity-from');
        var to = event.target.getAttribute('data-activity-to');
        if (from && to) {
            rectActivityInfo.querySelector('#activity-from').innerHTML = from;
            rectActivityInfo.querySelector('#activity-to').innerHTML = to;
            rectActivityInfo.querySelector('#activity-duration').style.display = 'block';
        } else {
            rectActivityInfo.querySelector('#activity-duration').style.display = 'none';
        }

        // Placement of the hovering window
        rectActivityInfo.style.left = event.pageX + "px";
        rectActivityInfo.style.top = event.pageY + "px";

        // Fade-in animation
        rectActivityInfo.className = "hover";
    } else {
        rectActivityInfo.className = "default";
    }
}